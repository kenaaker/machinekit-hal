#!/bin/bash -e
#
# Build Docker container images

# TODO: Use data from debian-distro-settings.json object

DOCKER_BUILD_ARGS=""

USAGE="Usage:  $0 [ args ... ]
  Args:
    -i <docker_id>
    -r <docker_repo>
    -t <docker_tag>
    -T mkbuilder | lcncbuilder (default:  mkbuilder)
    -a <additional_docker_build_args>
  Example:  Build 'machinekit/mk-hal-cross-builder:amd64_11' image
    $0 -i machinekit -r mkbuilder -t amd64_11"
usage() {
    { test -z "$*" || echo $*; echo "$USAGE"; } 1>&2
    test -z "$*"  # Exit nonzero if error message supplied
    exit 0
}

# Read command line options
while getopts i:r:t:T:a:h ARG; do
    case $ARG in
        i) REPO_NAME=$OPTARG ;;
        t) CACHE_TAG=$OPTARG ;;
        r) IMAGE_NAME=$OPTARG ;;
        T) TARGET=$OPTARG ;;
        a) $DOCKER_BUILD_ARGS+="$OPTARG" ;;
        h) usage ;;
        *) usage "ERROR:  Unknown arg" ;;
    esac
done

if test -z "$REPO_NAME" -o -z "$CACHE_TAG" -o -z "$IMAGE_NAME"; then
    usage "ERROR:  Missing required parameters -i -r -t"
fi
TARGET=${TARGET:-mkbuilder}

# Set Dockerfile path
DOCKERFILE_PATH=scripts/containers/buildsystem/debian/Dockerfile

# Build configuration variables for each tag
# - Architecture settings
case "${CACHE_TAG}" in
    amd64_*)
        DEBIAN_ARCH="amd64"
        SYS_ROOT=
        HOST_MULTIARCH="x86_64-linux-gnu"
        EXTRA_FLAGS=
        LDEMULATION=elf_x86_64
        ;;
    armhf_*)
        DEBIAN_ARCH="armhf"
        SYS_ROOT="/sysroot"
        HOST_MULTIARCH="arm-linux-gnueabihf"
        EXTRA_FLAGS=
        LDEMULATION=armelf_linux_eabi
        ;;
    arm64_*)
        DEBIAN_ARCH="arm64"
        SYS_ROOT="/sysroot"
        HOST_MULTIARCH="aarch64-linux-gnu"
        EXTRA_FLAGS=
        LDEMULATION=aarch64linux
        ;;
    i386_*)
        DEBIAN_ARCH="i386"
        SYS_ROOT="/sysroot"
        HOST_MULTIARCH="i386-linux-gnu"
        EXTRA_FLAGS="-m32"
        LDEMULATION="elf_i386"
        ;;
    *)
        usage "Unknown tag '${CACHE_TAG}'"
        ;;
esac

# - Distro settings
case "${CACHE_TAG}" in
    *_9)
        DISTRO_CODENAME="stretch"
        BASE_IMAGE="debian:stretch"
        DISTRO_VER="9"
        ;;
    *_10)
        DISTRO_CODENAME="buster"
        BASE_IMAGE="debian:buster"
        DISTRO_VER="10"
        ;;
    *_11)
        DISTRO_CODENAME="bullseye"
        BASE_IMAGE="debian:bullseye"
        DISTRO_VER="11"
        ;;
    *)
        usage "Unknown tag '${CACHE_TAG}'"
        ;;
esac

if test $TARGET = lcncbuilder; then
    # For LCNC image, check exactly one of each mk-hal{,-dev} pkgs exists
    for PKG in machinekit-hal machinekit-hal-dev; do
        NUM_PKGS=$(ls packages/${PKG}_*.deb | wc -l)
        if test $NUM_PKGS = 0; then
            usage "ERROR:  ${PKG} .deb file not found in CWD"
        elif test $NUM_PKGS -gt 1; then
            usage "ERROR:  Multiple ${PKG} .deb files found in CWD"
        fi
    done
    # Prefix `lcnc_` to Docker tag
    TAG_PREFIX=lcnc_
fi


IMAGE_NAME="$REPO_NAME/$IMAGE_NAME:$TAG_PREFIX$CACHE_TAG"
# In connection with value in .github/workflows/build-preview.yaml
NAME="machinekit-hal-debian-builder-v.$CACHE_TAG"
MAINTAINER="John Morris <john@zultron.com>"
DESCRIPTION="Machinekit-HAL Debian $DISTRO_CODENAME builder for $DEBIAN_ARCH architecture."
BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
VCS_REF=$(git rev-parse --verify HEAD)
# Hoping that every clone has remote named 'origin'
# ATTENTION: Make sure you don't expose your TOKEN
VCS_URL=$(git config --get remote.origin.url)

# Debug info
(
    echo "Build settings:"
    echo "    IMAGE_NAME=${IMAGE_NAME}"
    echo "    CACHE_TAG=${CACHE_TAG}"
    echo "    DEBIAN_ARCH=${DEBIAN_ARCH}"
    echo "    SYS_ROOT=${SYS_ROOT}"
    echo "    HOST_MULTIARCH=${HOST_MULTIARCH}"
    echo "    DISTRO_CODENAME=${DISTRO_CODENAME}"
    echo "    BASE_IMAGE=${BASE_IMAGE}"
    echo "    DISTRO_VER=${DISTRO_VER}"
    echo "    EXTRA_FLAGS=${EXTRA_FLAGS}"
    echo "    LDEMULATION=${LDEMULATION}"
    echo "    TARGET=${TARGET}"
    echo "Labels:"
    echo "    NAME=${NAME}"
    echo "    MAINTAINER=${MAINTAINER}"
    echo "    DESCRIPTION=${DESCRIPTION}"
    echo "    BUILD_DATE=${BUILD_DATE}"
    echo "    VCS_REF=${VCS_REF}"
    echo "    VCS_URL=${VCS_URL}"
) >&2

# Be sure we're in the right directory
cd "$(dirname $0)/.."

# Build the image
set -x
exec docker build \
       --progress=plain \
       --build-arg DEBIAN_ARCH=${DEBIAN_ARCH} \
       --build-arg SYS_ROOT=${SYS_ROOT} \
       --build-arg HOST_MULTIARCH=${HOST_MULTIARCH} \
       --build-arg DISTRO_CODENAME=${DISTRO_CODENAME} \
       --build-arg BASE_IMAGE=${BASE_IMAGE} \
       --build-arg DISTRO_VER=${DISTRO_VER} \
       --build-arg EXTRA_FLAGS=${EXTRA_FLAGS} \
       --build-arg LDEMULATION=${LDEMULATION} \
       --build-arg NAME=${NAME} \
       --build-arg MAINTAINER="${MAINTAINER}" \
       --build-arg DESCRIPTION="${DESCRIPTION}" \
       --build-arg BUILD_DATE=${BUILD_DATE} \
       --build-arg VCS_REF=${VCS_REF} \
       --build-arg VCS_URL=${VCS_URL} \
       --target ${TARGET} \
       ${DOCKER_BUILD_ARGS} \
       -f $DOCKERFILE_PATH -t $IMAGE_NAME .
