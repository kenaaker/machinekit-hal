#
#  Protobuf support for Machinekit
#
#  build Python modules, and C++ bindings from .proto files
#
#  optionally build Javscript bindings if  --enable-proto-js is given to configure
#
#
#  The proto definitions are held in a separate repo: github.com/machinekit/machinetalk-protobuf.
#
#  To change the proto definitions:
#
#     1. create a .proto file under machinetalk/proto
#
#     2. add the message type to machinetalk/proto/types.proto
#        enum MessageType, e.g. MT_EMC_OPERATOR_TEXT_TYPE
#
#     3. if the message will NOT be used in-kernel/RT components, consider
#	 tagging it with the option  [(nanopb).type = FT_IGNORE];
# 	 this will reduce the overhead of RT protobuf support.
#
#     4. refer to the message type by including
#        machinetalk/generated/types.pb-c.h and use e.g.
#        MESSAGE_TYPE_MT_EMC_OPERATOR_TEXT_TYPE
#
#    When done, file a PR against github.com/machinekit/machinetalk-protobuf.
#
#
# TODO:
#    generate compiled Python bindings for better performance, current options
#    (sorted in decreasing order of estimated stability/completeness at this time):
#
#    The upcoming 2.6 protobuf release should support C compiled Python bindings out of the box.
#
# Michael Haberler 2/2013

NAMESPACEDIR := machinetalk/protobuf
MACHINETALK := machinetalk
MTINCLUDES := $(MACHINETALK)/include
PBGEN := $(MACHINETALK)/build
PROTOSRCDIR := $(MACHINETALK)/proto/src
PROTODIR := $(PROTOSRCDIR)/$(NAMESPACEDIR)

# this is a hack to get runtests to pass
# build/header_sanity just blindly follows the breadcrumb trail for all
# includes within headers and will not look in the subdirs nicely created
# for some of those files, because the files that reference them, have
# them present in the PWD in the source tree or have an INCLUDE_PATH set.

../include/%.h: ./$(PBGEN)/$(NAMESPACEDIR)/%.h
	$(ECHO) Copying header file $@
	cp  $^ $@

../include/%.h: ./$(NANOPB)/%.h
	$(ECHO) Copying header file $@
	cp  $^ $@


# Javascript support
JSGEN=$(MACHINETALK)/tutorial/htdocs/js/machinetalk

# proto2js options

# this comes in with the machinetalk-protobuf subtree merge:
GENDEP := $(MACHINETALK)/proto/scripts/protoc-gen-depends

# the directory where descriptor.proto lives:
GPBINCLUDE :=  $(shell $(PKG_CONFIG) --variable=includedir protobuf)
DESCDIR    :=  $(GPBINCLUDE)/google/protobuf

# search path for .proto files
# see note on PBDEP_OPT below
vpath %.proto  $(PROTODIR):$(GPBINCLUDE):$(DESCDIR)/compiler

# the set of all proto specs generated files depend on
PROTO_SPECS := $(wildcard $(PROTODIR)/*.proto)

USERSRCS += $(PROTO_SPECS)

# C bindings library
PROTOCLIB = ../lib/libmachinetalk-pb2.so

# C++ bindings library
PROTOCXXLIB = ../lib/libmachinetalk-pb2++.so

# Nanopb C bindings library
NANOPROTOCLIB := ../lib/libmachinetalk-npb.so
PROTOC_FLAGS :=
PROTOCXX_LDFLAGS := $(PROTOBUF_LIBS)
PROTOCXX_FLAGS :=
PROTOCXX_CXX_FLAGS := -fPIC $(PROTOBUF_CFLAGS)

# tell protobuf to use compiled C for Python bindings
# not available in 2.4.1/jessie
#export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=cpp

# ---- generate dependcy files for .proto files
#
# the list of .d dep files for .proto files:
PROTO_DEPS :=  $(patsubst %,objects/%,$(patsubst %.proto,%.d,$(PROTO_SPECS)))
#
# options to the dependency generator protoc plugin
PBDEP_OPT :=
#PBDEP_OPT += --debug
PBDEP_OPT += --cgen=$(PBGEN)
PBDEP_OPT += --pygen=lib/python/$(NAMESPACEDIR)
PBDEP_OPT += --jsgen=$(JSGEN)
# this path must match the vpath arrangement exactly or the deps will be wrong
# unfortunately there is no way to extract the proto path in the code
# generator plugin
PBDEP_OPT += --vpath=$(PROTOSRCDIR)
PBDEP_OPT += --vpath=$(GPBINCLUDE)
PBDEP_OPT += --vpath=$(DESCDIR)/compiler
#/usr/bin/protoc --plugin=protoc-gen-depends=./machinetalk/proto/scripts/protoc-gen-depends --proto_path=. --proto_path=/usr/include --depends_out=" --cgen=. --pygen=../lib/python/machinetalk/protobuf --jsgen=machinetalk/tutorial/htdocs/js/machinetalk --vpath=. --vpath=/usr/include ":./objects  machinetalk/protobuf/rtapi_message.proto

#objects/$(PROTODIR)/%.d: $(PROTODIR)/%.proto
objects/$(PROTODIR)/%.d: %.proto
	$(ECHO) "machinetalk/Submakefile protoc compile dependencies for $<"
	@mkdir -p objects/$(PROTODIR)
	$(PROTOC) --plugin=protoc-gen-depends=$(GENDEP) \
	--proto_path=$(PROTOSRCDIR)/ \
	--proto_path=$(GPBINCLUDE) \
	--depends_out="$(PBDEP_OPT)":./objects/$(PROTOSRCDIR)/ \
	 $<

#---------- C++ rules -----------
#
# generate .cc/.h from proto files
# for command.proto, generated files are: command.pb.cc	command.pb.h
$(PBGEN)/$(NAMESPACEDIR)/%.pb.cc $(PBGEN)/$(NAMESPACEDIR)/%.pb.h: %.proto
	$(ECHO) "pmachinetalk/Submakefile rotoc compile C++ $<"
	@mkdir -p $(PBGEN)
	$(PROTOC) $(PROTOCXX_FLAGS) \
	--proto_path=$(PROTOSRCDIR)/ \
	--proto_path=$(GPBINCLUDE)/ \
	--cpp_out=./$(PBGEN)/ $<

# ----------- Nanopb c/h rules
#
# Nanopb: generate *.npb.{c,h} from proto files
# these depend on npb options
$(PBGEN)/$(NAMESPACEDIR)/%.npb.c $(PBGEN)/$(NAMESPACEDIR)/%.npb.h: %.proto $(NANOPB_SUPPORT)
	$(ECHO) "machinetalk/Submakefile protoc compile nanopb C $<"
	@mkdir -p $(PBGEN)/$(NAMESPACEDIR)
	$(PROTOC) $(PROTOC_FLAGS) \
	--plugin=protoc-gen-nanopb=protoc-gen-nanopb \
	--nanopb_out="--generated-include-format='#include \""$(NAMESPACEDIR)"/%s\"' --extension=.npb --options-file=$(MACHINETALK)/nanopb.options":$(PBGEN) \
	--proto_path=$(PROTOSRCDIR)/ \
	--proto_path=$(GPBINCLUDE) \
	$<

# ------------- Python rules ------------
#
# this is for the stock protobuf Python bindings -
# adapt here if using one of the accelerated methods
#
# generate Python modules from proto files
../lib/python/$(NAMESPACEDIR)/%_pb2.py: %.proto
	$(ECHO) "machinetalk/Submakefile protoc compile python $<"
	@mkdir -p ../lib/python/$(NAMESPACEDIR)
	$(PROTOC) $(PROTOC_FLAGS) \
	--proto_path=$(PROTOSRCDIR)/ \
	--proto_path=$(GPBINCLUDE)/ \
	--python_out=../lib/python/ $<


# ------------- ProtoBuf.js rules ------------
#
# see https://github.com/dcodeIO/ProtoBuf.js
#
# generate Javascript modules from proto files
$(JSGEN)/%.js: %.proto
	$(ECHO) $(PROTO2JS)" compile js $<"
	@mkdir -p $(JSGEN)
	$(PROTO2JS) 	$< \
	$(PROTOBUFJS_OPT)$(JSNAMESPACE) \
	> $@

# generated Javasript sources
# everything is namespace pb except nanopb.proto
PROTO_JS_SRCS +=$(JSGEN)/nanopb.js

# --- misc supporting files ----
../lib/python/$(NAMESPACEDIR)/__init__.py:
	@mkdir -p ../lib/python/$(NAMESPACEDIR)/
	touch ../lib/python/$(NAMESPACEDIR)/__init__.py

../lib/python/$(MACHINETALK)/__init__.py:
	@mkdir -p ../lib/python/$(MACHINETALK)/
	touch ../lib/python/$(MACHINETALK)/__init__.py

# ---------- libraries ---------
#
# C++ bindings library
$(call TOOBJSDEPS, $(PROTO_CXX_SRCS)) : EXTRAFLAGS += $(PROTOCXX_CXX_FLAGS)

$(PROTOCXXLIB).0: $(patsubst %.cc,objects/%.o,$(PROTO_CXX_SRCS))
	$(ECHO) Linking $(notdir $@)
	@mkdir -p ../lib
	@rm -f $@
	$(CXX) $(LDFLAGS) -Wl,-soname,$(notdir $@) -shared -o $@ $^ \
		$(PROTOBUF_LIBS)

# protoc generated headers are exported to ../include
../include/%.h: ./$(NAMESPACEDIR)/$(PBGEN)/%.h
	$(ECHO) Copying header file $@
	cp $^ $@

../include/%.hh: ./$(NAMESPACEDIR)/$(PBGEN)/%.hh
	$(ECHO) Copying header file $@
	cp $^ $@

# This path is backwards isnt it?
# protoc generated headers are exported to ../include
../include/$(NAMESPACEDIR)/%.h: ./$(PBGEN)/$(NAMESPACEDIR)/%.h
	$(ECHO) Copying header file $@
	@mkdir -p $(dir $@)
	cp $^ $@

../include/$(NAMESPACEDIR)/%.hh: ./$(PBGEN)/$(NAMESPACEDIR)/%.hh
	$(ECHO) Copying header file $@
	@mkdir -p $(dir $@)
	cp $^ $@

../include/%.h: ./$(MACHINETALK)/include/%.h
	$(ECHO) Copying header file $@
	@mkdir -p $(dir $@)
	cp $^ $@

../include/%.hh: ./$(MACHINETALK)/include/%.hh
	$(ECHO) Copying header file $@
	@mkdir -p $(dir $@)
	cp $^ $@

# those will be compiled
USERSRCS += $(PROTO_CXX_SRCS)


GENERATED += $(PROTO_PY_TARGETS)

PYTARGETS += $(PROTO_PY_TARGETS)

INCLUDES += $(MTINCLUDES)

TARGETS += $(PROTO_CXX_INCS) $(PROTO_C_INCS)
TARGETS += $(MT_INSTALL_INCS)
TARGETS += $(PROTOCXXLIB) $(PROTOCXXLIB).0

clean: machinetalk-clean
machinetalk-clean:
	rm -rf $(PBGEN) ../include/$(MACHINETALK)
	rm -rf ../lib/python/$(MACHINETALK)
